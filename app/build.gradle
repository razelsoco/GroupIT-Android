apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.singtel.groupit"
        minSdkVersion 21 // from android L (5.0)
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    productFlavors {
        staging {
            applicationId "com.singtel.groupit.staging"
        }
        production {
            applicationId "com.singtel.groupit"
        }
    }

    // keystore
//    signingConfigs {
//        release {
//            storeFile file('groupit_production_key.keystore')
//            storePassword 'groupit_production_key'
//            keyPassword 'groupit_production_key'
//            keyAlias 'groupit'
//        }
//    }
    signingConfigs {
        release {
            keyAlias 'groupit'
            keyPassword 'groupit_production_key'
            storeFile file('/Users/lanna/Documents/Projects/GroupIT/GroupIT-Android/app/src/groupit_production_key.jks')
            storePassword 'groupit_production_key'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            //proguardFile 'proguard-aurora.txt'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            minifyEnabled false
            proguardFile 'proguard-aurora.txt'
        }
    }

    // build name
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            def fileName = file.name.replace(".apk",
                    "-" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + getDate() + ".apk")
            fileName = fileName.replace("GroupIT-Android", "groupit")
            output.outputFile = new File(file.parent, fileName)
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'AndroidManifest.xml'
    }
    dexOptions {
        //incremental true // By default incremental is turned on Java compilation in 2.1.0-rc1 (2016/4/22) or later
        javaMaxHeapSize "4g"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // android support or google play services
    def androidSupportVersion = "23.4.0"
    compile "com.android.support:support-v4:${androidSupportVersion}"
    compile "com.android.support:appcompat-v7:${androidSupportVersion}"
    compile "com.android.support:recyclerview-v7:$androidSupportVersion"
    compile "com.android.support.constraint:constraint-layout:1.0.0-alpha3"

    // libraries
    compile 'com.jakewharton:butterknife:7.0.1'
    compile "uk.co.chrisjenx:calligraphy:2.2.0"

    // test framework
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile "com.android.support:support-annotations:${androidSupportVersion}"

    // others
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
}


def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}
